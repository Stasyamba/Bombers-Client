<?xml version="1.0" encoding="utf-8"?>
<s:Panel xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:mx1="library://ns.adobe.com/flex/halo"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:fx="http://ns.adobe.com/mxml/2009"
		 creationComplete="panelCreationComplete();"
		 borderVisible="false"
		 dropShadowVisible="false"
		 skinClass="skins.common.EmptyPopUpS"
		 xmlns:flexcomponents="components.common.flexcomponents.*"
		 xmlns:create="components.pages.game.windows.create.*" 
		 xmlns:preloaders="components.common.utils.preloaders.*"
		 implements="components.common.base.window.IWindow"
		 >
	<fx:Script>
		<![CDATA[
			import components.common.base.window.IWindow;
		]]>
	</fx:Script>
	
	<fx:Declarations>
		
		<s:Animate id="disapearingAnimation" target="{this}" duration="300"
				   effectEnd="{close();}">
			<s:SimpleMotionPath property="alpha"
								valueFrom="1"
								valueTo="0"
								/>
		</s:Animate>
		
		<s:Animate id="apearingAnimation" target="{this}" duration="1200">
			<s:SimpleMotionPath property="alpha"
								valueFrom="0" valueTo="1"
								/>
		</s:Animate>
		
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import mx.controls.Alert;
			import components.common.game.requesttogame.IRequestContent;
			import components.common.game.requesttogame.RequestGameObject;
			import components.common.utils.adjustcolor.Color;
			import components.common.utils.adjustcolor.ColorMatrix;
			import components.common.utils.adjustcolor.ColorMatrixObject;
			
			import engine.games.GameType;
			
			import mx.collections.ArrayCollection;
			import mx.core.IVisualElement;
			import mx.managers.PopUpManager;
				
			private var requestsAll: Array = new Array();
			[Bindable]
			private var currentPage: int = 0;
			[Bindable]
			private var pagesCount: int = 0;
			
			public function close():void {
				Context.Model.windowsManager.deleteWindow(this);
				PopUpManager.removePopUp(this);
			}
			
			public function closeWrapper():void {
				disapearingAnimation.play();
			}
			
			private function loadRequestCollection():void
			{
				requestsAll = new Array();
				
				for each(var r:RequestGameObject in Context.Model.currentSettings.requestToGames)
				{
					requestsAll.push(r);
				}
				
			}
			
			private function panelCreationComplete():void {
				Context.Model.windowsManager.closeAll(true);
				Context.Model.windowsManager.addWindow(this);
				
				apearingAnimation.play();
				
				var cm:ColorMatrix = new ColorMatrix();
				var cmo:ColorMatrixObject = new ColorMatrixObject(0, 0, null, 0, new Color(-20, -20, -20));
				cm.applyColorMatrixObject(cmo);
				
				var cm1:ColorMatrix = new ColorMatrix();
				var cmo1:ColorMatrixObject = new ColorMatrixObject(0, 0);
				cm1.applyColorMatrixObject(cmo1);
				
				lightBorderContainer.filters = [cm1.filter];
				darkBorderContainer.filters = [cm.filter];
				
				/* get all requests */
				
				loadRequestCollection();
				setPage(requestsAll.length - 1);
				
				
				Context.Model.addCustomListener(ContextEvent.OE_REQUEST_COLLECTION_IS_CHANGED, function (e:ContextEvent):void 
				{
					loadRequestCollection();
					/* if((e.data as Object).hasOwnProperty("isActionDelete") && (e.data as Object).hasOwnProperty("index"))
					{
						setPage(e.data["index"]);
					}else
					{ */
					setPage(requestsAll.length - 1);
					
					
				});
			}
			
			/* pages */
			
			private function setPage(page:int):void 
			{
				var tmp:Array = new Array();
				pagesCount = requestsAll.length;
				
				if (page >= 0 && page <= pagesCount) 
				{
					if(requestsAll[page] is RequestGameObject)
					{
						var gt: GameType = (requestsAll[page] as RequestGameObject).gameType;
						var content:IVisualElement = null;
						
						switch(gt)
						{
							case GameType.REGULAR:
								content = new GameWithAllContent();
								break;
						}
						
						if(content != null)
						{
							requestContentGroup.removeAllElements();
							(content as IRequestContent).initContent(requestsAll[page]);
							requestContentGroup.addElement(content);
						}
						
						currentPage = page;
						
						backPageButton.enabled = true;
						forwardPageButton.enabled = true;
						
						if (currentPage == 0) {
							backPageButton.enabled = false;
						}
						
						if (page == pagesCount - 1) {
							forwardPageButton.enabled = false;
						}
					}
				}
			}
			
			private function switchPage(difference: int):void {
				setPage(currentPage + difference);
			}
			
		]]>
	</fx:Script>
	<s:layout>
		<s:BasicLayout/>
	</s:layout>
	
	<s:BorderContainer id="lightBorderContainer"
					   backgroundImage="@Embed(source='assets/windows/global/inventory/patternBG.jpg')"
					   backgroundImageFillMode="repeat"
					   width="395" height="196"
					   borderVisible="false"
					   />
	
	<s:BorderContainer id="darkBorderContainer"
					   backgroundImage="@Embed(source='assets/windows/global/inventory/patternBG.jpg')"
					   backgroundImageFillMode="repeat"
					   width="379" height="180"
					   borderVisible="false"
					   x="8" y="8"
					   />
	
	<s:VGroup x="8" y="28" width="379" height="180" id="requestContentGroup" />
	
	<s:HGroup x="167" y="18" verticalAlign="middle">
		<s:HGroup gap="3">
			<s:Button id="backPageButton" 
					  skinClass="skins.buttons.ListButtonLeftS" 
					  useHandCursor="true" buttonMode="true"
					  click="switchPage(-1);"
					  />
			
			<s:Label text="{currentPage + 1} / {pagesCount}" color="0xffffff" fontFamily="mpbc" fontSize="16" />
			
			<s:Button id="forwardPageButton" 
					  skinClass="skins.buttons.ListButtonRightS" 
					  useHandCursor="true" buttonMode="true"
					  click="switchPage(1);"
					  />
		</s:HGroup>
	</s:HGroup>
	
	
	<flexcomponents:CloseButton skinClass="skins.buttons.CloseButtonBlackS"
								x="349" y="13"
								scale="0.7"
								click="closeWrapper();"
								/>
	
	<s:controlBarContent/>
</s:Panel>