<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
         xmlns:s="library://ns.adobe.com/flex/spark"
         xmlns:mx="library://ns.adobe.com/flex/mx"
         xmlns:flexcomponents="components.common.flexcomponents.*"
        >

    <fx:Declarations>
        <s:Animate id="apearingA" target="{this}" duration="300"
                   effectStart="{this.alpha = 0;}"
                >
            <s:SimpleMotionPath property="alpha" valueFrom="{this.alpha}" valueTo="1.0"/>
        </s:Animate>

        <s:Animate id="disapearingA" target="{this}" duration="300"
                >
            <s:SimpleMotionPath property="alpha" valueFrom="{this.alpha}" valueTo="0.0"/>
        </s:Animate>
    </fx:Declarations>

    <fx:Script>
		<![CDATA[
        import components.common.items.ItemObject
        import components.common.items.ItemProfileObject
        import components.common.items.ItemViewObject
        import components.pages.global.inventory.InventoryW

        private var itemProfileObject:ItemProfileObject = null;

        [Bindable]
        private var itemViewObject:ItemViewObject = null;
        [Bindable]
        private var itemCountStringView:String = "0";

        /* popup section */
        private var isMouseOnPopUp:Boolean = false;
        private var isMouseOnPreview:Boolean = false;

        private function checkPopUp():void {
            if (!isMouseOnPreview && !isMouseOnPopUp) {
                hidePopUp();
            }
        }

        private function showPopUp():void {
            strokeColor.color = 0xe3bd8b;
            submenuPopUp.displayPopUp = true;
        }

        private function hidePopUp():void {
            strokeColor.color = 0x8c7459;
            submenuPopUp.displayPopUp = false;
        }


        public function initContent(itemProfileObjectP:ItemProfileObject):void {
            itemProfileObject = itemProfileObjectP;

            var itemObject:ItemObject = Context.Model.itemsManager.getItem(itemProfileObject.itemType);

            itemViewObject = itemObject.viewObject;
            itemCountStringView = itemProfileObject.itemCount.toString();

            apearingA.play();
        }

        private function weaponOn():void {
            hidePopUp();


//				Context.Model.dispatchCustomEvent(
//					ContextEvent.IM_RIGHT_CONTENT_WARNING, 
//					"Это оружие итак стоит у вас в качестве дополнительного оружия. Как это вообще получилось?"
//				);

            // immitation

            //Context.Model.dispatchCustomEvent(ContextEvent.IM_SERVERREQUEST, true);
            Context.Model.currentSettings.gameProfile.selectedWeaponLeftHand = itemProfileObject;

        }

        private function weaponInfo():void {
            Context.Model.dispatchCustomEvent(
                    ContextEvent.IM_RIGHT_CONTENT_INFO, itemViewObject.type
                    );
        }


        private function deleteWeapon():void {
            Context.Model.dispatchCustomEvent(
                    ContextEvent.IM_RIGHT_CONTENT_CONFIRM,
            {
                message: "Вы уверены что хотите выбросить оружие из рюкзака? Оно будет безвозвратно утрачено, но освободиться лишний слот!",
                itemType: itemViewObject.type,
                actionType: InventoryW.ACTION_TYPE_DELETE
            }
                    );

        }
        ]]>
	</fx:Script>

    <s:Group id="baseGroup"
             mouseOver="{ isMouseOnPopUp = true; showPopUp();}"
             mouseOut="{ isMouseOnPopUp = false; checkPopUp(); }"
            >

        <s:Rect width="43" height="43">
            <s:fill>
                <s:SolidColor color="0x000000"/>
            </s:fill>
            <s:stroke>
                <s:SolidColorStroke id="strokeColor" color="0x8c7459" weight="1"/>
            </s:stroke>
        </s:Rect>


        <s:HGroup width="43" height="43"
                  horizontalAlign="center" verticalAlign="middle"
                >
            <mx:Image source="{itemViewObject.smallImageURL}"
                      smoothBitmapContent="true"
                      scaleX="0.8" scaleY="0.8"
                      trustContent="{Context.Model.trustContent}"
                    />
        </s:HGroup>

        <s:Group alpha="0.7"
                 x="{43 - bgCountRect.width/2}" y="{-bgCountRect.height/2 + 3}"
                >
            <s:Rect id="bgCountRect"
                    width="{countLabel.width + 4}" height="{countLabel.height + 4}"
                    radiusX="2" radiusY="2"
                    >
                <s:fill>
                    <s:SolidColor color="0xffffff"/>
                </s:fill>
            </s:Rect>

            <s:Label id="countLabel"
                     x="2" y="2"
                     text="{itemCountStringView}"
                     color="0x000000" fontFamily="mpr" fontSize="10"
                    />

        </s:Group>
    </s:Group>


    <s:PopUpAnchor id="submenuPopUp"
            >
        <s:Group id="popUpContent"
                 mouseOver="{ isMouseOnPopUp = true; showPopUp();}"
                 mouseOut="{ isMouseOnPopUp = false; checkPopUp(); }"
                 alpha="1"

                >
            <s:Group
                    y="-38" x="40">
                <s:BitmapImage id="subMenuBG"
                               source="@Embed(source='assets/windows/global/inventory/subMenuBG.png')"
                        />

                <s:VGroup width="{subMenuBG.width}" height="{subMenuBG.height}"
                          horizontalAlign="left" verticalAlign="middle"
                          paddingLeft="36"
                        >
                    <flexcomponents:TextButton text="Надеть" fontColorUp="0xf5d6b4" fontColorOver="0xfcab4f"
                                               textFontSize="16"
                                               click="weaponOn();"/>
                    <flexcomponents:TextButton text="Докупить" fontColorUp="0xf5d6b4" fontColorOver="0xfcab4f"
                                               textFontSize="16"
                                               click="weaponInfo();"
                            />
                    <flexcomponents:TextButton text="Выбросить" fontColorUp="0xf5d6b4" fontColorOver="0xfcab4f"
                                               textFontSize="16"
                                               click="deleteWeapon();"
                            />

                </s:VGroup>
            </s:Group>


        </s:Group>

    </s:PopUpAnchor>

</s:Group>
