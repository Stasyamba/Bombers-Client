<?xml version="1.0" encoding="utf-8"?>
<s:ItemRenderer xmlns:mx1="http://ns.adobe.com/mxml/mx"
                xmlns:mx="library://ns.adobe.com/flex/mx"
                xmlns:fx="http://ns.adobe.com/mxml/2009"
                xmlns:s="library://ns.adobe.com/flex/spark"
                autoDrawBackground="false"
                useHandCursor="true" buttonMode="true"
                width="60" height="60"
        >
    <s:layout>
        <s:BasicLayout/>
    </s:layout>

    <fx:Declarations>


    </fx:Declarations>

    <fx:Script>
		<![CDATA[
        import mx.controls.Alert
        ]]>
	</fx:Script>

    <s:states>
        <s:State name="normal"/>
        <s:State name="hovered"/>
        <s:State name="selected"/>
    </s:states>

    <fx:Script>
		<![CDATA[
        import components.common.items.ItemObject
        import components.common.items.ItemProfileObject
        import components.common.items.categories.ItemCategory

        import mx.core.IVisualElement

        private var slot:IVisualElement = null

        override public function set data(value:Object):void {
            super.data = value;


            var itemObject:ItemObject = Context.Model.itemsManager.getItem(data.itemType);

            if (itemObject != null) {
                var itemCategory:ItemCategory = Context.Model.itemsCategoryManager.getItemCategory(data.itemType);

                //mx.controls.Alert.show(ObjectUtil.toString({it: itemCategory}));

                switch (itemCategory) {
                    case ItemCategory.AURA:

                        var asi:AuraSlot = new AuraSlot();
                        asi.initContent(data as ItemProfileObject);
                        slot = asi;
                        slotGroup.paddingLeft = 0;
                        break;

                    case ItemCategory.WEAPON:

                        var ws:WeaponSlot = new WeaponSlot();
                        ws.initContent(data as ItemProfileObject); //itemObject.viewObject, data.itemCount);
                        slot = ws;
                        slotGroup.paddingLeft = 5;
                        break;

                    case ItemCategory.QUEST_ITEM:

                        var qis:QuestItemSlot = new QuestItemSlot()
                        qis.initContent(data as ItemProfileObject);
                        slot = qis;
                        slotGroup.paddingLeft = 0;
                        break;

                        break;

                    default:
                        break;
                }

                if (slot != null) {
                    slotGroup.removeAllElements();
                    slotGroup.addElement(slot);

                } else {
                    Alert.show("В рюкзаке предметы неопознанной категории ищи в ItemPackIR.mxml");
                }

            } else {
                // show error
            }

        }
        ]]>
	</fx:Script>

    <s:HGroup id="slotGroup"
              width="60" height="60"
              horizontalAlign="center" verticalAlign="middle">

    </s:HGroup>


</s:ItemRenderer>