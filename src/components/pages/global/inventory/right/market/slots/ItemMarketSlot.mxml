<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
         xmlns:s="library://ns.adobe.com/flex/spark"
         xmlns:mx="library://ns.adobe.com/flex/mx"
         xmlns:flexcomponents="components.common.flexcomponents.*"
         xmlns:slots="components.pages.global.inventory.right.market.slots.*"
         creationComplete="init();">
    <fx:Script>
		<![CDATA[

        ]]>
	</fx:Script>

    <fx:Declarations>
        <!-- Place non-visual elements (e.g., services, value objects) here -->
    </fx:Declarations>

    <fx:Script>
		<![CDATA[
        import components.common.base.access.AccessManager
        import components.common.base.access.rules.AccessRuleObject
        import components.common.base.access.rules.levelrule.AccessLevelRule
        import components.common.items.ItemObject
        import components.common.items.ItemProfileObject
        import components.common.items.ItemType
        import components.common.items.categories.ItemCategory
        import components.common.resources.ResourcePrice

        private var itemType:ItemType = null;
        private var itemObject:ItemObject;

        [Bindable]
        private var itemName:String = "";
        private var itemCategory:ItemCategory;
        [Bindable]
        private var itemDescription:String = "";

        [Bindable]
        private var requiredLevelStringView:String = "";

        [Bindable]
        private var isLevelRuleSuccess:Boolean = false;
        [Bindable]
        private var isGotItem:Boolean = false;
        [Bindable]
        private var isButButtonVisible:Boolean = false;


        private var thisItemPrice:ResourcePrice;

        public function init():void {
            Context.Model.addCustomListener(ContextEvent.IM_REMOVE_ITEM_RULES_DENIED_CONTENT, function (e:ContextEvent):void {
                rulesDenied.removeAllElements();
            });
        }

        public function initContent(itemTypeP:ItemType):void {
            itemType = itemTypeP;
            itemObject = Context.Model.itemsManager.getItem(itemType);
            itemCategory = Context.Model.itemsCategoryManager.getItemCategory(itemType);

            itemName = itemObject.viewObject.name;
            itemDescription = itemObject.viewObject.description;

            weaponImage.source = itemObject.viewObject.smallImageURL;


            thisItemPrice = Context.Model.marketManager.getItemPrice(itemType);
            itemPricePanel.initContent(thisItemPrice);


            // delete all rules denied visuals
            rulesDenied.removeAllElements();

            // check access (got item - only for Aurs and Quest, then = level rule)
            var accessRulesObject:Array = AccessManager.checkAccessItem(itemType);

            if (itemCategory == ItemCategory.AURA || itemCategory == ItemCategory.QUEST_ITEM) {
                for each(var item:ItemProfileObject in Context.Model.currentSettings.gameProfile.gotItems) {
                    if (item.itemType == itemType) {
                        isGotItem = true;
                        break;
                    }
                }
            }

            if (!isGotItem) {
                for each(var aro:AccessRuleObject in accessRulesObject) {
                    if (aro.accessRule is AccessLevelRule) {
                        isLevelRuleSuccess = aro.isSuccess;

                        if (!isLevelRuleSuccess) {
                            requiredLevelStringView = "Необходим " + (aro.accessRule as AccessLevelRule).minimumLevel.toString() + " уровень.";
                        }

                        break;
                    }
                }

                if (isLevelRuleSuccess) {
                    isButButtonVisible = true;
                }
            }


        }

        private function tryToBuyItem():void {
            var ownResources:ResourcePrice = Context.Model.currentSettings.gameProfile.resources;

            if (!ownResources.isBiggerOrEqual(thisItemPrice)) {
                rulesDenied.removeAllElements();

                var rdContent:NotEnoughResources = new NotEnoughResources();
                rdContent.initContent(thisItemPrice.getDifference(ownResources));

                rulesDenied.addElement(rdContent);
            } else {
                // but item
                // check for existing in profile (quest items, aurs)

                var gotItem:Boolean = false;

                switch (itemCategory) {
                    case ItemCategory.AURA:
                    case ItemCategory.QUEST_ITEM:
                        for each(var item:ItemProfileObject in Context.Model.currentSettings.gameProfile.gotItems) {
                            if (item.itemType == itemType) {
                                gotItem = true;
                            }
                        }
                        break;
                    case ItemCategory.WEAPON:
                        break;
                }

                if (gotItem) {
                    Context.Model.dispatchCustomEvent(
                            ContextEvent.IM_RIGHT_CONTENT_WARNING,
                            "У вас в рюкзаке уже есть такой предмет. Вы не моежете купить его больше чем 1 штуку."
                            );
                } else {
                    //Context.Model.dispatchCustomEvent(ContextEvent.IM_SERVERREQUEST, true);
                    Context.gameServer.buyItemRequest(itemType)

                }

            }
        }
        ]]>
	</fx:Script>

    <s:BitmapImage id="bgImage" source="@Embed(source='assets/windows/global/inventory/itemMarketBG.png')"/>
    <s:VGroup width="392" height="{bgImage.height}"
              horizontalAlign="left" verticalAlign="top"
              paddingLeft="15"
            >

        <s:HGroup height="86" verticalAlign="middle"
                  gap="15">
            <s:HGroup id="weaponImageGroup" width="44"
                      horizontalAlign="center">
                <mx:Image id="weaponImage"/>
            </s:HGroup>

            <s:VGroup horizontalAlign="left">
                <s:Label text="{itemName}" color="0xf5d6b4"
                         fontSize="18" fontFamily="mpbc"
                        />
                <s:Label text="{itemDescription}" color="0xf5d6b4"
                         fontSize="12" fontFamily="mpr"
                         maxWidth="271"
                        />
            </s:VGroup>
        </s:HGroup>

        <s:HGroup width="100%" height="100%"
                  verticalAlign="middle"
                  paddingLeft="5" paddingRight="10"
                >

            <s:HGroup id="itemPricePanelGroup"
                      verticalAlign="middle"
                      gap="20">
                <s:Label text="Цена: " color="0xf5d6b4" fontSize="18" fontFamily="mpbc"/>
                <slots:PriceView id="itemPricePanel"/>
            </s:HGroup>


            <s:Group width="100%" height="100%">
                <s:HGroup width="100%" height="100%"
                          horizontalAlign="right" verticalAlign="middle"
                          visible="{isButButtonVisible}"
                        >
                    <flexcomponents:PatternButton skinClass="skins.buttons.Pattern3ButtonS"
                                                  customLabel="Купить"
                                                  scale="0.7"
                                                  fontSize="18"
                                                  fontSizeOver="18"
                                                  click="tryToBuyItem();"
                            />
                </s:HGroup>

                <s:HGroup width="100%" height="100%"
                          horizontalAlign="right" verticalAlign="middle"
                          visible="{!isLevelRuleSuccess}">
                    <s:Label fontFamily="mpbc" fontSize="16" color="0xf5d6b4"
                             text="{requiredLevelStringView}"
                            />
                </s:HGroup>

                <s:HGroup width="100%" height="100%"
                          horizontalAlign="right" verticalAlign="middle"
                          visible="{isGotItem}"
                        >
                    <s:BitmapImage source="@Embed(source='assets/windows/global/inventory/gotItemSign.png')"/>
                    <s:Label fontFamily="mpbc" fontSize="16" color="0x3db40f"
                             text="Уже куплено"
                            />
                </s:HGroup>
            </s:Group>
        </s:HGroup>
    </s:VGroup>

    <s:HGroup id="rulesDenied"
              width="392" height="{bgImage.height}"
              horizontalAlign="left" verticalAlign="top"
            />

</s:Group>
