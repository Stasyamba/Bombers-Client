<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
         xmlns:s="library://ns.adobe.com/flex/spark"
         xmlns:mx="library://ns.adobe.com/flex/mx"
         width="808" height="41"
         xmlns:toppanel="toppanel.*"
         xmlns:resources="toppanel.resources.*"
         creationComplete="init();"
         xmlns:bottompanel="components.pages.game.bottompanel.*"
         xmlns:flexcomponents="components.common.flexcomponents.*"
        >
    <fx:Script>
		<![CDATA[
        import components.ApplicationView
        import components.common.bombers.BomberType

        private function init():void {
            Context.Model.addCustomListener(ContextEvent.GP_CURRENT_LEFT_WEAPON_IS_CHANGED, function(e:ContextEvent):void {
                trace("updateLeft")
                leftHandWeapon.initContent(Context.Model.currentSettings.gameProfile.selectedWeaponLeftHand);
            });

            Context.Model.addCustomListener(ContextEvent.GPAGE_UPDATE_GAME_WEAPONS, function(e:ContextEvent):void {
                updateWeapons();
            });

            Context.Model.addCustomListener(ContextEvent.GPAGE_MY_PARAMETERS_IS_CHANGED, function (e:ContextEvent):void {
                if (Context.gameModel.isPlayingNow) {
                    mySpeed.count = BomberType.getViewSpeed(Context.Model.currentSettings.gameProfile.currentBomberType, Context.game.playerManager.me.speed);
                    myBombsCount.count = Context.game.playerManager.me.baseBombCount;
                    myWavePower.count = Context.game.playerManager.me.bombPower;
                    myHealth.count = Context.game.playerManager.me.life;
                } else {
                    updateFromBomberType()
                }
            });


            updateWeapons();
            updateFromBomberType();
            if (Context.Model.currentSettings.gameProfile.selectedWeaponLeftHand == null)
                Context.gameModel.increaseWeaponIndex()
            Context.gameModel.gameEnded.add(onGameEnded);
            Context.Model.addCustomListener(ContextEvent.NEED_TO_CHANGE_MAIN_TAB, function(e:ContextEvent):void {
                if (e.data == ApplicationView.TAB_NAME_GAME) {
                    Context.gameModel.gameEnded.add(onGameEnded);
                    updateFromBomberType()
                    if (Context.Model.currentSettings.gameProfile.selectedWeaponLeftHand == null)
                        Context.gameModel.increaseWeaponIndex()
                }
            })
        }

        private function updateWeapons():void {
            rightHandWeapon.initContent(Context.Model.currentSettings.gameProfile.selectedWeaponRightHand);
            leftHandWeapon.initContent(Context.Model.currentSettings.gameProfile.selectedWeaponLeftHand);
        }

        private function onGameEnded(p1:*, p2:*):void {
            updateFromBomberType()
        }

        private function openInventoryW():void {
            if (Context.gameModel.isPlayingNow)
                Context.Model.dispatchCustomEvent(ContextEvent.GPAGE_NEED_TO_SHOW_IS_PLAYING_PACK_WINDOW)
            else {
                Context.Model.dispatchCustomEvent(ContextEvent.NEED_TO_OPEN_INVENTORY_MARKET, true);
            }
        }

        private function quitTheGame():void {
            Context.Model.dispatchCustomEvent(ContextEvent.GPAGE_NEED_TO_SHOW_QUIT_THE_GAME_WINDOW);
        }


        private function updateFromBomberType():void {
            mySpeed.count = BomberType.getViewSpeed(Context.Model.currentSettings.gameProfile.currentBomberType, Context.Model.currentSettings.gameProfile.currentBomberType.speed);
            myBombsCount.count = Context.Model.currentSettings.gameProfile.currentBomberType.bombCount;
            myWavePower.count = Context.Model.currentSettings.gameProfile.currentBomberType.bombPower;
            myHealth.count = Context.Model.currentSettings.gameProfile.currentBomberType.startLife;
        }
        ]]>
	</fx:Script>

    <fx:Declarations>
        <!-- Place non-visual elements (e.g., services, value objects) here -->
    </fx:Declarations>


    <s:BitmapImage source="@Embed(source='assets/pageworld/bottompanel/common/bottomPanelBG.jpg')"
                   width="808" height="41"
            >
        <s:filters>
            <s:DropShadowFilter distance="1"
                                alpha="0.85"
                                angle="-90"
                                blurY="5"
                    />
        </s:filters>

    </s:BitmapImage>

    <s:HGroup width="100%" height="100%"
              verticalAlign="middle" horizontalAlign="left"
              paddingLeft="30"
              gap="43">

        <s:HGroup>
            <bottompanel:BomberBasePropertyTemplate id="mySpeed" propertyType="{BomberBasePropertyTemplate.TYPE_SPEED}"
                                                    count="0"/>
            <bottompanel:BomberBasePropertyTemplate id="myWavePower"
                                                    propertyType="{BomberBasePropertyTemplate.TYPE_WAVE_POWER}"
                                                    count="0"/>
            <bottompanel:BomberBasePropertyTemplate id="myBombsCount"
                                                    propertyType="{BomberBasePropertyTemplate.TYPE_BOBMS_COUNT}"
                                                    count="0"/>
            <bottompanel:BomberBasePropertyTemplate id="myHealth"
                                                    propertyType="{BomberBasePropertyTemplate.TYPE_HEALTH}" count="0"/>
        </s:HGroup>

        <!--<s:HGroup verticalAlign="middle">
            <s:Button skinClass="skins.buttons.PackButtonS" buttonMode="true" useHandCursor="true"
                      click="openInventoryW();"
                    />
            <flexcomponents:CloseButton skinClass="skins.buttons.CloseButtonOriginS" scale="0.5"
                                        click="quitTheGame();"/>
        </s:HGroup>-->

        
       <bottompanel:Menu />
          

        <bottompanel:Time/>

        <s:HGroup gap="25">
            <s:HGroup verticalAlign="middle">
                <bottompanel:Weapon id="rightHandWeapon"/>
                <s:VGroup>
                    <s:Label text="Пробел" fontFamily="mpbc" fontSize="14" color="0xffffff"/>
                    <s:Label text="Первое оружие" fontFamily="mpbc" fontSize="12" color="0xa5a5a5"/>

                </s:VGroup>
            </s:HGroup>
            <s:HGroup verticalAlign="middle">
                <bottompanel:Weapon id="leftHandWeapon" buttonMode="true" useHandCursor="true"/>
                <s:VGroup>
                    <s:Label text="X" fontFamily="mpbc" fontSize="14" color="0xffffff"/>
                    <s:Label text="Второе оружие" fontFamily="mpbc" fontSize="12" color="0xa5a5a5"/>

                </s:VGroup>
            </s:HGroup>
        </s:HGroup>


    </s:HGroup>

</s:Group>