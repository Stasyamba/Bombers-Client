<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
         xmlns:s="library://ns.adobe.com/flex/spark"
         xmlns:mx="library://ns.adobe.com/flex/mx"
         xmlns:leftpanel="components.pages.game.leftpanel.*"
         creationComplete="init();"
         height="444" width="106">

    <fx:Declarations>
        <!-- Place non-visual elements (e.g., services, value objects) here -->
    </fx:Declarations>

    <fx:Script>
		<![CDATA[
        import components.ApplicationView

        import engine.games.GameType
        import engine.profiles.LobbyProfile

        import mx.controls.Alert
        import mx.utils.ObjectUtil

        private var players:Array = new Array();

        private function init():void {
            Context.Model.addCustomListener(ContextEvent.MAIN_TAB_CHANGED, function(e:ContextEvent):void {
                if (e.data == ApplicationView.TAB_NAME_GAME)
                    onTabChanged()
            })
            //init is called the first time gamepage is shown, so:
            onTabChanged()
        }

        private function getPlayerSlot(slot:int):PlayerSlot {
            switch (slot) {
                case 0:return player0
                case 1:return player1
                case 2:return player2
                case 3:return player3
            }
            return null
        }

        private function deletePlayer(slot:int):void {
            var el:PlayerSlot;
            el = getPlayerSlot(slot);
            if (el != null)
                el.removePlayer();
        }

        private function addPlayer(newProfile:LobbyProfile, slot:int):void {
            if (newProfile == null)
                return;

            var el:PlayerSlot;
            el = getPlayerSlot(slot);
            if (el != null)
                el.setPlayer(newProfile);
        }


        private function setReady(isReady:Boolean, slot:int):void {
            var el:PlayerSlot;
            el = getPlayerSlot(slot);
            if (el != null)
                el.isReady = isReady;
        }

        private function onTabChanged():void {
            //listeners will be removed in gameModel, when user leaves game
            Context.gameModel.someoneJoinedToGame.add(onSomeoneJoinedToGame)
            Context.gameModel.someoneLeftGame.add(onSomeoneLeftGame)
            Context.gameModel.playerReadyChanged.add(onReadyChanged)
            Context.gameModel.threeSecondsToStart.add(onThreeSecondsToStart)

            Context.gameModel.leftGame.add(onLeftGame)
            Context.gameModel.readyToPlayAgain.add(onReadyToPlayAgain)
            onConnectedToGame()
        }

        private function onReadyToPlayAgain():void {
            if (Context.gameModel.gameType == GameType.REGULAR) {
                onConnectedToGame()
            }
        }

        private function onThreeSecondsToStart(p1:*, p2:*):void {
            for (var j:int = 0; j < Context.gameModel.lobbyProfiles.length; j++) {
                setReady(false, j)
            }
        }

        private function onLeftGame():void {
            for (var j:int = 0; j < 4; j++) {
                setReady(false, j)
                deletePlayer(j)
            }
        }

        private function onConnectedToGame():void {
            if (Context.gameModel.gameType == GameType.REGULAR) {
                onSomeoneJoinedToGame(null)
                if (Context.gameModel.createdByMe) {
                    Context.Model.dispatchCustomEvent(ContextEvent.GPAGE_NEED_TO_SHOW_GAME_IS_CREATED_WINDOW);
                } else {
                    Context.Model.dispatchCustomEvent(ContextEvent.GPAGE_NEED_TO_SHOW_GAME_READY_WINDOW);
                }
            }
        }

        private function onSomeoneLeftGame(lp:LobbyProfile):void {
            if (lp != null) {
                setReady(false, lp.slot)
                deletePlayer(lp.slot)
            }
        }

        private function onSomeoneJoinedToGame(p1:*):void {
            for (var j:int = 0; j < 4; j++) {
                deletePlayer(j)
            }
            for each (var prof:LobbyProfile in Context.gameModel.lobbyProfiles) {
                if (prof != null)
                    addPlayer(prof, prof.slot)
            }
            onReadyChanged()
        }

        private function onReadyChanged():void {
            for (var i:int = 0; i < 4; i++) {
                var lp:LobbyProfile = Context.gameModel.lobbyProfiles[i] as LobbyProfile
                if (lp != null) {
                    if (!getPlayerSlot(i).hasAnyPlayer())
                        addPlayer(lp, i)
                    setReady(lp.isReady, i);
                } else {
                    deletePlayer(i)
                }
            }
        }
        ]]>
	</fx:Script>

    <s:BitmapImage source="@Embed(source='assets/pagegame/leftpanel/bg.jpg')"
                   height="444"
                   smooth="true">
        <s:filters>
            <s:DropShadowFilter distance="1"
                                alpha="0.85"
                                angle="0"
                                blurY="5"
                    />
        </s:filters>
    </s:BitmapImage>

    <s:VGroup width="104" height="444"
              verticalAlign="middle" horizontalAlign="center"
              gap="20"
              id="playersGroup"
            >

        <leftpanel:PlayerSlot id="player0"/>
        <leftpanel:PlayerSlot id="player1"/>
        <leftpanel:PlayerSlot id="player2"/>
        <leftpanel:PlayerSlot id="player3"/>

    </s:VGroup>

</s:Group>
