<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
         xmlns:s="library://ns.adobe.com/flex/spark"
         xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:ui="engine.ui.*"
         creationComplete="init()" width="100%" height="100%">

    <fx:Declarations>
        <!-- Place non-visual elements (e.g., services, value objects) here -->
    </fx:Declarations>
    <fx:Script><![CDATA[
        import components.ApplicationView

        import engine.EngineContext
        import engine.games.GameType
        import engine.ui.GameFieldView

        private var now:int,then:int;

        private var gameView:GameFieldView;

        //temporary ui elements

        public function init():void {
            //todo: location code
            bg.addChild(Context.imageService.asContentDisplay("l00.map.background"))
        }

        public function everyGameTabOpeningInit():void {
            switch(Context.gameModel.gameType){
                case GameType.QUEST:
                    initQuest();
                    break
                case GameType.REGULAR:
                    initMultiPlayer();
                    break
                default:
                    throw new Error("unknown game type" + Context.gameModel.gameType.value)
            }
            subscribeEnterFrameEvent();
        }

        private function initMultiPlayer():void {
            //listener'll be removed in gameModel
            Context.gameModel.gameReady.add(function ():void {
                gameView = new GameFieldView(Context.game);
                addElement(gameView);
            });

            Context.gameModel.leftGame.add(function():void {
                endGame()
                while (hasEventListener(Event.ENTER_FRAME))
                    unsubscribeEnterFrameEvent();
            })
            //listener'll be removed in gameModel
            Context.gameModel.gameEnded.add(function (winnerId:String, winnerExp:int):void {

                endGame();
                Context.Model.dispatchCustomEvent(ContextEvent.GPAGE_NEED_TO_SHOW_RESULTS_WINDOW)
            });
        }

        private function initQuest():void {
            //listener'll be removed in gameModel
            Context.gameModel.questReady.add(function ():void {
                gameView = new GameFieldView(Context.game);
                addElement(gameView);
            });

            Context.gameModel.leftQuest.add(function():void {
                endGame()
                while (hasEventListener(Event.ENTER_FRAME))
                    unsubscribeEnterFrameEvent();
            })
            //listener'll be removed in gameModel
            Context.gameModel.questEnded.add(function (p0:String, p1:int):void {
                endGame();
                //Context.Model.dispatchCustomEvent(ContextEvent.GPAGE_NEED_TO_SHOW_RESULTS_WINDOW)
                changeTabBack();
            });
        }


        private function endGame():void {
            if (gameView != null) {
                gameView.destroy();
                removeElement(gameView)
                gameView = null
            }
        }

        private function subscribeEnterFrameEvent():void {
            trace("subscribe")
            now = then = getTimer();
            addEventListener(Event.ENTER_FRAME, onEnterFrame)
        }

        private function onEnterFrame(e:Event):void {
            now = getTimer();
            var elapsed:int = now - then;
            then = now;
            EngineContext.frameEntered.dispatch(elapsed);
        }

        private function unsubscribeEnterFrameEvent():void {
            trace("unsubscribe")
            removeEventListener(Event.ENTER_FRAME, onEnterFrame)
        }

        //change tab back
        private function changeTabBack():void {
            Context.Model.dispatchCustomEvent(ContextEvent.NEED_TO_CHANGE_MAIN_TAB, ApplicationView.TAB_NAME_WORLD);
            if (hasEventListener(Event.ENTER_FRAME))
                unsubscribeEnterFrameEvent();
        }
        ]]></fx:Script>

    <s:BorderContainer id="patternBorderContainer" width="100%" height="100%"
                       backgroundImage="@Embed(source='/assets/pagegame/grassPattern.jpg')"
                       backgroundImageFillMode="repeat"
                       borderVisible="false"/>
    <s:SpriteVisualElement id="bg"/>
</s:Group>
