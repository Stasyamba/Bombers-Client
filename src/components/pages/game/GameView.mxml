<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
         xmlns:s="library://ns.adobe.com/flex/spark"
         xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:ui="engine.ui.*"
         creationComplete="init()">

    <fx:Declarations>
        <!-- Place non-visual elements (e.g., services, value objects) here -->
    </fx:Declarations>
    <fx:Script><![CDATA[
        import components.ApplicationView
        import components.common.game.multygameresult.GameResults
        import components.common.utils.adjustcolor.ColorMatrix
        import components.common.utils.adjustcolor.ColorMatrixObject
        import components.common.game.multygameresult.Result

        import engine.EngineContext
        import engine.profiles.LobbyProfile
        import engine.ui.GameFieldView
        import engine.ui.GameResultsView
        import engine.ui.ThreeSecondsToStart

        import mx.managers.PopUpManager

        import org.osmf.layout.AbsoluteLayoutFacet

        private var now:int,then:int;

        private var gameView:GameFieldView;

        //temporary ui elements
        private var threeSecsToStart:ThreeSecondsToStart = new ThreeSecondsToStart();
        private var gameResultsView:GameResultsView = new GameResultsView();

        public function init():void {
            var cm1:ColorMatrix = new ColorMatrix();
            var cmo1:ColorMatrixObject = new ColorMatrixObject(0, 0);
            cm1.applyColorMatrixObject(cmo1);

            patternBorderContainer.filters = [cm1.filter];
        }

        public function everyGameInit():void {

            Context.gameModel.gameReady.add(function ():void {
                gameView = new GameFieldView(Context.game);
                addElement(gameView);
            });

            if (Context.gameModel.gameType.isMultiplayer) {
                initMultiPlayer();
            } else {
                initSinglePlayer();
            }

            subscribeEnterFrameEvent();
            Context.gameModel.readyToCreateGame.dispatch();
        }

        private function initMultiPlayer():void {
            Context.gameModel.gameEnded.add(function (endData:Array):void {

                endGame();
                var gr:GameResults = new GameResults(new Array(), new Array())
                for each (var object:Object in endData) {
                    for each (var lobbyProfile:LobbyProfile in Context.gameModel.lastGameLobbyProfiles) {
                        if(object.id == lobbyProfile.id)
                            gr.getResults().push(new Result(lobbyProfile,object.place,object.exp))
                    }
                }
                Context.Model.dispatchCustomEvent(ContextEvent.GPAGE_NEED_TO_SHOW_RESULTS_WINDOW, gr)
            });
            //initChat();
        }

        private function initSinglePlayer():void {
            Context.gameModel.gameEnded.add(function ():void {

                endGame();
                Context.Model.dispatchCustomEvent(ContextEvent.GPAGE_NEED_TO_SHOW_RESULTS_WINDOW, new GameResults([], []))
                Context.gameModel.readyToPlayAgain.addOnce(function ():void {
                    changeTabBack();
                })
            });
        }


        private function endGame():void {
            if (gameView != null) {
                gameView.destroy();
                removeElement(gameView)
                gameView = null
            }
        }

        private function subscribeEnterFrameEvent():void {

            now = then = getTimer();
            addEventListener(Event.ENTER_FRAME, onEnterFrame)
        }

        private function onEnterFrame(e:Event):void {
            now = getTimer();
            var elapsed:int = now - then;
            then = now;
            EngineContext.frameEntered.dispatch(elapsed);
        }

        private function unsubscribeEnterFrameEvent():void {
            removeEventListener(Event.ENTER_FRAME, onEnterFrame)
        }

        //change tab back
        private function changeTabBack():void {
            Context.Model.dispatchCustomEvent(ContextEvent.NEED_TO_CHANGE_MAIN_TAB, ApplicationView.TAB_NAME_WORLD);
            if (hasEventListener(Event.ENTER_FRAME))
                unsubscribeEnterFrameEvent();
        }
        ]]></fx:Script>
    <s:BorderContainer id="patternBorderContainer" width="100%" height="100%"
                       backgroundImage="@Embed(source='assets/windows/global/inventory/patternBG.jpg')"
                       backgroundImageFillMode="repeat"/>
    <mx:Image id="backgroundImage" source="http://www.vensella.ru/eg/testmap.jpg" visible="false"
              complete="backgroundImage.visible = true;"/>
    <s:Group id="group"/>

</s:Group>
