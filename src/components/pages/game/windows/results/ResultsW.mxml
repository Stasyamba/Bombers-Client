<?xml version="1.0" encoding="utf-8"?>
<s:Panel xmlns:mx="library://ns.adobe.com/flex/mx"
         xmlns:mx1="library://ns.adobe.com/flex/halo"
         xmlns:s="library://ns.adobe.com/flex/spark"
         xmlns:fx="http://ns.adobe.com/mxml/2009"
         creationComplete="panelCreationComplete();"
         borderVisible="false"
         dropShadowVisible="false"
         skinClass="skins.common.EmptyPopUpS"
         xmlns:flexcomponents="components.common.flexcomponents.*"
         xmlns:create="components.pages.game.windows.create.*" xmlns:slots="components.pages.global.inventory.right.market.slots.*"
        >
    <fx:Declarations>

        <s:Animate id="disapearingAnimation" target="{this}" duration="300"
                   effectEnd="{close();}">
            <s:SimpleMotionPath property="alpha"
                                valueFrom="1"
                                valueTo="0"
                    />
        </s:Animate>

        <s:Animate id="apearingAnimation" target="{this}" duration="1200">
            <s:SimpleMotionPath property="alpha"
                                valueFrom="0" valueTo="1"
                    />
        </s:Animate>

    </fx:Declarations>

    <fx:Script>
		<![CDATA[
			import components.common.items.ItemObject;
			import components.common.items.ItemProfileObject;
			import components.common.items.ItemType;
			import components.common.items.categories.ItemCategory;
			import components.common.utils.adjustcolor.Color;
			import components.common.utils.adjustcolor.ColorMatrix;
			import components.common.utils.adjustcolor.ColorMatrixObject;
			
			import engine.profiles.LobbyProfile;
			import engine.utils.greensock.TweenMax;
			
			import mx.core.IFlexDisplayObject;
			import mx.managers.PopUpManager;

        public function close():void {
            PopUpManager.removePopUp(this);
			
			Context.Model.removeCustomEventListener(ContextEvent.RGAME_NEED_TO_SET_WEAPON_TO_HAND, setWeaponToHand);
        }

        public function closeWrapper():void {
            disapearingAnimation.play();
        }

		private function setWeaponToHand(e: ContextEvent): void	
		{
			if(e.data is ItemType)
			{
				var itemProfileObject: ItemProfileObject = Context.Model.currentSettings.gameProfile.getItemProfileObject(e.data as ItemType);
				
				if(itemProfileObject != null && Context.Model.itemsCategoryManager.getItemCategory(itemProfileObject.itemType) == ItemCategory.WEAPON)
				{
					Context.Model.currentSettings.gameProfile.selectedWeaponLeftHand = null;
					Context.Model.currentSettings.gameProfile.selectedWeaponLeftHand = itemProfileObject;
				}
				
				Context.Model.dispatchCustomEvent(ContextEvent.GP_CURRENT_LEFT_WEAPON_IS_CHANGED);
			}
		}
			
        private function panelCreationComplete():void {
            apearingAnimation.play();

			// fill item offer 
			
			var items: Array = Context.Model.itemsManager.getItems();
			var allowedItems: Array = new Array();
			for each(var i: ItemObject in items)
			{
				if(Context.Model.itemsCategoryManager.getItemCategory(i.type) == ItemCategory.WEAPON)
				{
					allowedItems.push(i);
				}
			}
			
			
			var r: int = Math.round(Math.random()*(allowedItems.length));
			if(r == allowedItems.length)
			{
				r = allowedItems.length - 1;
			}
			
			itemOffers.initContent((allowedItems[r] as ItemObject).type);
			
			//
			
			if(!Context.Model.hasCustomListener(ContextEvent.RGAME_NEED_TO_SET_WEAPON_TO_HAND))
			{
				Context.Model.addCustomListener(ContextEvent.RGAME_NEED_TO_SET_WEAPON_TO_HAND, setWeaponToHand);
			}
			
            var cm:ColorMatrix = new ColorMatrix();
            var cmo:ColorMatrixObject = new ColorMatrixObject(0, 0, null, 0, new Color(-20, -20, -20));
            cm.applyColorMatrixObject(cmo);

            var cm1:ColorMatrix = new ColorMatrix();
            var cmo1:ColorMatrixObject = new ColorMatrixObject(0, 0);
            cm1.applyColorMatrixObject(cmo1);

            lightBorderContainer.filters = [cm1.filter];
            darkBorderContainer.filters = [cm.filter];

			
            // fill the results

            resultsVGroup.removeAllElements();

            var place:int = 1;
            while (true) {
                
				var found:Boolean = false;
				
                for each(var lp:LobbyProfile in Context.gameModel.lastGameLobbyProfiles) {
                    
					if (lp == null)
                        continue;
					
                    if (lp.place == place) 
					{
                        found = true;
						
                        var l:Label = new Label();
                        l.text = place.toString() + ". " + lp.nick + "  +" + lp.expEarned + " опыта";
                        l.minWidth = 180;
                        l.setStyle("fontFamily", "mpbc");
						
                        if (Context.Model.currentSettings.gameProfile.id == lp.id) {
                            l.setStyle("fontSize", 18);
                            l.setStyle("color", 0xfbb044);
                        } else {
                            l.setStyle("fontSize", 14);
                            l.setStyle("color", 0xffffff);
                        }

                        resultsVGroup.addElement(l);

                        place++;
                    }
                }
                if (!found)
				{
                    break;
				}
            }
			
			
        }

        private function onClose():void 
		{
            closeWrapper();
		
            //Context.gameModel.readyToPlayAgain.dispatch();
        }
		
        ]]>
	</fx:Script>
    <s:layout>
        <s:BasicLayout/>
    </s:layout>

    <s:BorderContainer id="lightBorderContainer"
                       backgroundImage="@Embed(source='assets/windows/global/inventory/patternBG.jpg')"
                       backgroundImageFillMode="repeat"
					   width="496" height="396"
                       borderVisible="false"
            />

    <s:BorderContainer id="darkBorderContainer"
                       backgroundImage="@Embed(source='assets/windows/global/inventory/patternBG.jpg')"
                       backgroundImageFillMode="repeat"
					   width="480" height="380"
                       borderVisible="false"
                       x="8" y="8"
            />

    <s:VGroup width="480" height="380"
              x="8" y="8"
              horizontalAlign="center"
              verticalAlign="middle"
			  gap="50"
            >
		
		<s:VGroup width="100%" horizontalAlign="center">
	        <s:Label text="Результаты:" fontFamily="mpbc" fontSize="24" color="0xffffff"/>
	        <s:VGroup id="resultsVGroup" horizontalAlign="left"/>
		</s:VGroup>
		
		<s:VGroup width="100%" horizontalAlign="center">
			<s:Label text="Может попробуем это?" fontFamily="mpbc" fontSize="24" color="0xffffff"/>
			<s:HGroup width="100%" horizontalAlign="center">
				<slots:ItemMarketSlot id="itemOffers">
					<slots:filters>
						<s:DropShadowFilter blurX="10" blurY="10" color="0x000000" alpha="0.5"/>
					</slots:filters>
				</slots:ItemMarketSlot>
			</s:HGroup>
		</s:VGroup>
		
		
    </s:VGroup>

    <flexcomponents:CloseButton skinClass="skins.buttons.CloseButtonBlackS"
                                x="439" y="13"
                                click="onClose();"
            />

    <s:controlBarContent/>
</s:Panel>