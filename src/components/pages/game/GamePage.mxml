<?xml version="1.0" encoding="utf-8"?>
<s:NavigatorContent xmlns:fx="http://ns.adobe.com/mxml/2009"
                    xmlns:s="library://ns.adobe.com/flex/spark"
                    xmlns:mx="library://ns.adobe.com/flex/mx"
                    contentCreationComplete="init();"
                    xmlns:toppanel="components.pages.world.toppanel.*"
                    xmlns:leftpanel="components.pages.game.leftpanel.*"
                    xmlns:bottompanel="components.pages.game.bottompanel.*"
                    xmlns:rightpanel="components.pages.game.rightpanel.*"
                    xmlns:game="components.pages.game.*"
                    xmlns:subbottompanel="components.pages.game.subbottompanel.*"
                    width="100%" height="100%"
        >

    <fx:Declarations>
    </fx:Declarations>

    <fx:Script>
		<![CDATA[
        import components.ApplicationView
        import components.common.game.multygameresult.GameResults
        import components.pages.game.windows.common.PackIsPlayingW
        import components.pages.game.windows.common.QuitTheGameW
        import components.pages.game.windows.create.GameCreatedW
        import components.pages.game.windows.create.GameReadyW
        import components.pages.game.windows.create.PreStartW
        import components.pages.game.windows.results.ResultsW

        import engine.bombss.BombType
        import engine.utils.Utils

        import mx.managers.PopUpManager

        private var now:int,then:int;
        private var readyWindow:GameReadyW = null;


        private function init():void {

            Context.Model.addCustomListener(ContextEvent.MAIN_TAB_CHANGED, function (e:ContextEvent):void {
                if (e.data == ApplicationView.TAB_NAME_GAME) {
                    gameView.everyGameInit();
                }
            });

            Context.Model.addCustomListener(ContextEvent.GPAGE_NEED_TO_SHOW_GAME_IS_CREATED_WINDOW, function (e:ContextEvent):void {
                showCreatedGameWindow();
            });

            Context.Model.addCustomListener(ContextEvent.GPAGE_NEED_TO_SHOW_GAME_READY_WINDOW, function (e:ContextEvent):void {
                showReadyWindow();
            });

            Context.Model.addCustomListener(ContextEvent.GPAGE_NEED_TO_SHOW_QUIT_THE_GAME_WINDOW, function (e:ContextEvent):void {
                showQuitTheGameWindow();
            });

            Context.Model.addCustomListener(ContextEvent.GPAGE_NEED_TO_SHOW_IS_PLAYING_PACK_WINDOW, function (e:ContextEvent):void {
                showPackIsPlayingWindow();
            });

            Context.Model.addCustomListener(ContextEvent.GPAGE_NEED_TO_SHOW_RESULTS_WINDOW, function (e:ContextEvent):void {
                if (e.data != null) {
                    if (e.data is GameResults) {
                        showResultsWindow(e.data as GameResults);
                    }
                }
            });

            Context.Model.addCustomListener(ContextEvent.GPAGE_NEED_TO_SHOW_THREESEC_WINDOW, function (e:ContextEvent):void {
                openThreeSecondsToStart();
            });

            Context.gameModel.threeSecondsToStart.add(function(t1:*, t2:*):void {
                Context.Model.dispatchCustomEvent(ContextEvent.GPAGE_NEED_TO_SHOW_THREESEC_WINDOW)
            })


            stage.addEventListener(KeyboardEvent.KEY_DOWN, keyDown);
            stage.addEventListener(KeyboardEvent.KEY_UP, keyUp);
        }

        private function keyDown(event:KeyboardEvent):void {
            if (Utils.isArrowKey(event.keyCode)) {
                if(Context.game != null)
                    Context.game.playerManager.me.addDirection(Utils.arrowKeyCodeToDirection(event.keyCode))
            } else if (event.keyCode == Keyboard.SPACE) {
                if(Context.game != null)
                    Context.game.playerManager.me.setBomb(BombType.REGULAR);
            } else if (event.keyCode == 88) {   //x
                if(Context.game != null)
                    Context.game.playerManager.me.tryActivateWeapon();
            } else if (event.keyCode == 90) {   //z
                Context.Model.dispatchCustomEvent(ContextEvent.GPAGE_INCREASE_CURRENT_WEAPON_INDEX)
            }
        }

        private function keyUp(event:KeyboardEvent):void {
            if (Utils.isArrowKey(event.keyCode)) {
                if(Context.game != null)
                    Context.game.playerManager.me.removeDirection(Utils.arrowKeyCodeToDirection(event.keyCode))
            }
        }

        private function openThreeSecondsToStart():void {
            var pw:PreStartW = new PreStartW();

            PopUpManager.addPopUp(pw, this, true);
            PopUpManager.centerPopUp(pw);

            pw.x += 58;
            pw.y -= 105;

            Context.gameModel.gameStarted.addOnce(function ():void {
                pw.closeWrapper()
            })
        }

        private function showReadyWindow():void {
            //if(readyWindow == null)
            //{
            readyWindow = new GameReadyW();
            readyWindow.x = 215;
            readyWindow.y = 66;

            PopUpManager.addPopUp(readyWindow, this, false);
            //}
        }

        private function showCreatedGameWindow():void {
            var cgw:GameCreatedW = new GameCreatedW();
            cgw.x = 215;
            cgw.y = 66;

            PopUpManager.addPopUp(cgw, this, false);
        }

        private function showResultsWindow(gr:GameResults):void {
            var rw:ResultsW = new ResultsW();
            rw.gameResults = gr;
            rw.x = 265;
            rw.y = 86;

            PopUpManager.addPopUp(rw, this, true);
        }

        private function showQuitTheGameWindow():void {
            var qgw:QuitTheGameW = new QuitTheGameW();
            qgw.x = 265;
            qgw.y = 186;

            PopUpManager.addPopUp(qgw, this, true);
        }


        private function showPackIsPlayingWindow():void {
            var pipw:PackIsPlayingW = new PackIsPlayingW();
            pipw.x = 265;
            pipw.y = 186;

            PopUpManager.addPopUp(pipw, this, true);
        }

        private function showConnectToGameW():void {
        }
        ]]>
    </fx:Script>


    <!-- <s:VGroup id="group">
        <s:BitmapImage id="background"
                       source="{MapBlocks.MAP_GRASS()}"
                       width="680" height="440"/>
        <ui:ChatControl left="10" id="chat" messageSent="onSend(event)"/>
    </s:VGroup>-->

    <s:Rect width="100%" height="100%">
        <s:fill>
            <s:SolidColor color="0x000000"/>
        </s:fill>
    </s:Rect>

    <game:GameView id="gameView" y="{topPanel.height + 2}" x="{leftPanel.width}"/>

    <toppanel:TopPanelView id="topPanel" y="0"/>

    <!--<subbottompanel:SubBottomPanelView id="subBottomPanel" y="526"/>-->
    <subbottompanel:SubBottomPanelView y="526"/>


    <bottompanel:BottomPanelView y="485"/>
    <leftpanel:LeftPanelView id="leftPanel" y="41"/>
    <rightpanel:RightPanelView y="41" x="787"/>


</s:NavigatorContent>