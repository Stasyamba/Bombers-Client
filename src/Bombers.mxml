<?xml version="1.0" encoding="utf-8"?>
<vkUI:VkontakteApplication
        xmlns:vkUI="library://vkontakte.ru/2009/ui"
        xmlns:s="library://ns.adobe.com/flex/spark"
        xmlns:fx="http://ns.adobe.com/mxml/2009"
        xmlns:mx="library://ns.adobe.com/flex/mx"
        xmlns:components="components.*" xmlns:flexcomponents="components.common.flexcomponents.*"
        usePreloader="true"
        width="807" height="700"
        backgroundColor="0x000000"
        frameRate="60" xmlns:preloaders="components.common.utils.preloaders.*"
		preloader="components.common.utils.preloaders.MainPreloader"
        >

    <vkUI:layout>
        <s:BasicLayout/>
    </vkUI:layout>

    <fx:Declarations>
        <s:HTTPService url="http://cs1.vensella.ru/app_strepsils/Login" id="loginHTTP" method="POST"
                       resultFormat="text"/>
    </fx:Declarations>

    <fx:Style>
        @namespace
        vkUI
        "library://vkontakte.ru/2009/ui";
        @namespace
        s
        "library://ns.adobe.com/flex/spark";
        @namespace
        mx
        "library://ns.adobe.com/flex/mx";
        @namespace
        components
        "componentes.*";

        @font-face {
            src: url("../assets/fonts/MPBoldCond.otf")
        ;
            fontFamily: mpbc
        ;
        }

        @font-face {
            src: url("../assets/fonts/MPSemibold.ttf")
        ;
            fontFamily: mps
        ;
        }

        @font-face {
            src: url("../assets/fonts/MPRegular.otf")
        ;
            fontFamily: mpr
        ;
        }

        @font-face {
            src: url("../assets/fonts/MPBoldCondItalic.otf")
        ;
            fontFamily: mpbi
        ;
        }

        global {
            modal-transparency: 0.3;
            modal-transparency-color: #000000;
            modal-transparency-blur: 0.2;
        }

    </fx:Style>

    <fx:Script>
		<![CDATA[
        import api.vkontakte.VkontakteGlobals;
        
        import appmodel.ApplicationModel;
        
        import components.ApplicationView;
        import components.WallView;
        import components.common.utils.enviroment.vkontakte.ApiResult;
        import components.common.utils.enviroment.vkontakte.FlashVars;
        
        import mx.core.IVisualElement;

        public static const APP_STARTED_FROM_WALL:int = 0;
        public static const APP_STARTED_COMMON:int = 1;


        private var mainContentGroup:IVisualElement;


        override protected function onAddedToStage(e:Event):void {
            super.onAddedToStage(e);

            if (isWrapperExists) {

                basePreloaderGroup.visible = true;

                VkontakteGlobals.wrapper.addEventListener("onSettingsChanged", onSettingsChanged);
                VkontakteGlobals.wrapper.addEventListener("onApplicationAdded", onApplicationAdded);
                VkontakteGlobals.wrapper.addEventListener("onLocationChanged", onLocationChanged);

                Context.Model.viewer.id = VkontakteGlobals.wrapper.application.parameters.viewer_id;

                Context.Model.currentSettings.flashVars.viewerType = VkontakteGlobals.wrapper.application.parameters.viewer_type;
                Context.Model.currentSettings.flashVars.groupId = VkontakteGlobals.wrapper.application.parameters.group_id;
                Context.Model.currentSettings.flashVars.referrer = VkontakteGlobals.wrapper.application.parameters.referrer;
                Context.Model.currentSettings.flashVars.posterId = VkontakteGlobals.wrapper.application.parameters.poster_id;
                Context.Model.currentSettings.flashVars.scaleMode = VkontakteGlobals.wrapper.application.scaleMode;
                Context.Model.currentSettings.flashVars.postId = VkontakteGlobals.wrapper.application.parameters.post_id;
                Context.Model.currentSettings.flashVars.userId = VkontakteGlobals.wrapper.application.parameters.user_id;
                Context.Model.currentSettings.flashVars.userId = VkontakteGlobals.wrapper.application.parameters.auth_key;

                if (Context.Model.currentSettings.flashVars.referrer == FlashVars.WALL_VIEW_INLINE) {
                    initApp(APP_STARTED_FROM_WALL);
                } else {

                    //mx.controls.Alert.show(VkontakteGlobals.wrapper.application.parameters.api_result.toString());
                    Context.Model.currentSettings.apiResult = new ApiResult(VkontakteGlobals.wrapper.application.parameters.api_result, false);

                    //mx.controls.Alert.show(Context.Model.currentSettings.apiResult.toString());
                    initApp(APP_STARTED_COMMON);


                    /* if (VkontakteGlobals.wrapper.application.parameters.is_app_user == 0) {
                     VkontakteGlobals.wrapper.external.showInstallBox();
                     }
                     else {
                     onApplicationAdded(null);
                     } */
                }
            } else {
                // local testing

                Context.Model.viewer.id = "72969483";
				Context.Model.currentSettings.apiResult = new ApiResult("", true);

                initApp(APP_STARTED_COMMON);
            }
        }

        private function onSettingsChanged(e:Object):void {
            navigateToURL(new URLRequest(ApplicationModel.APPLICATION_LINK));
            // may be starting initiated proccess with standert functions
        }

        private function onApplicationAdded(e:Object):void {
//            var permissions:Number = Context.Model.currentSettings.apiResult.settingsResponde;
//
//            if (!Context.isSettingsIncludeArr(permissions, [1,2,4])) {
//                VkontakteGlobals.wrapper.external.showSettingsBox(7);
//            } else {
//                initApp(APP_STARTED_COMMON);
//            }
			
            //initApp(APP_STARTED_COMMON);
        }

        private function onLocationChanged(e:Object):void {
            //mx.controls.Alert.show("Hello! Location chaged!");
            //mx.controls.Alert.show(e.location.toString());
        }


        private function initApp(type:int):void {


            switch (type) {
                case APP_STARTED_FROM_WALL:

                    basePreloaderGroup.visible = false;

                    mainContentGroup = new WallView();
                    mainApplicationGroup.addElement(mainContentGroup);

                    mainApplicationGroup.scaleX = 607 / 456;
                    mainApplicationGroup.scaleY = 412 / 308;

                    break;

                case APP_STARTED_COMMON:

                    mainContentGroup = new ApplicationView();
                    mainApplicationGroup.addElement(mainContentGroup);

                    Context.Model.addCustomListener(ContextEvent.SHOW_MAIN_PREALODER, function(e:ContextEvent):void {
                        basePreloaderGroup.visible = e.data as Boolean;
                    });

                    Context.Model.addCustomListener(ContextEvent.NEED_TO_SHOW_CANT_CONNECT_WINDOW, function(e:ContextEvent):void {
                        basePreloaderGroup.visible = false
                        disconnectedText.text = "Не удалось подключиться к серверу"
                        disconnectedWindow.visible = true;
                    });

                    Context.gameServer.loginError.addOnce(function():void{
                        basePreloaderGroup.visible = false
                        disconnectedText.text = "Не удалось войти на сервер.\nСкорее всего у вас просто\nоткрыто еще одно окно\nБомбастеров"
                        disconnectedWindow.visible = true;
                    })

                    Context.Model.addCustomListener(ContextEvent.NEED_TO_SHOW_DISCONNECTED_WINDOW, function(e:ContextEvent):void {
                        disconnectedWindow.visible = true;
                    });

                    if (isWrapperExists) {
                        Context.gameModel.init();
                    }

                    break;
                default:
                    break;
            }
        }

        private function retry():void {
            if(isWrapperExists){
                navigateToURL(new URLRequest(ApplicationModel.APPLICATION_LINK),"_self");
            }
        }
        ]]>
	</fx:Script>

    <s:BorderContainer
            id="mainApplicationGroup"
            width="100%" height="100%"
            backgroundColor="0xffffff"
            borderVisible="false"
            />

    <s:Group id="basePreloaderGroup" width="100%" height="100%"
             visible="false">
        <s:Rect width="100%" height="100%"
                alpha="1"
                >
            <s:fill>
                <s:SolidColor color="0x000000"/>
            </s:fill>
        </s:Rect>
        <s:HGroup width="100%" height="100%"
                  horizontalAlign="center" verticalAlign="middle"
                  paddingTop="-200"
                >
            <preloaders:Spinner tickColor="0xeeeeee" tickWidth="6" size="60"/>
            <s:Label text="Загружаю всякий стафф" fontFamily="mpbc" fontSize="50" color="0xeeeeee"/>
        </s:HGroup>
    </s:Group>

    <s:Group id="disconnectedWindow" width="100%" height="100%"
             visible="false">
        <s:Rect width="100%" height="100%"
                alpha="0.6"
                >
            <s:fill>
                <s:SolidColor color="0x000000"/>
            </s:fill>
        </s:Rect>
        <s:VGroup width="100%" height="100%"
                  horizontalAlign="center" verticalAlign="middle"
                  paddingTop="-200"
                >
            <s:Label id="disconnectedText" text="Произошло отключение от сервера" fontFamily="mpbc" fontSize="50" color="0xeeeeee" textAlign="center"/>
            <flexcomponents:PatternButton skinClass="skins.buttons.Pattern3ButtonS"
                                          customLabel="Еще раз"
                                          fontSize="30"
                                          fontSizeOver="30"
                                          click="retry()"
                    />
        </s:VGroup>
    </s:Group>

</vkUI:VkontakteApplication> 