<?xml version="1.0" encoding="utf-8"?>
<vkUI:VkontakteApplication
        xmlns:vkUI="library://vkontakte.ru/2009/ui"
        xmlns:s="library://ns.adobe.com/flex/spark"
        xmlns:fx="http://ns.adobe.com/mxml/2009"
        xmlns:mx="library://ns.adobe.com/flex/mx"
        xmlns:components="components.*" xmlns:flexcomponents="components.common.flexcomponents.*"
        usePreloader="true"
        width="807" height="700"
        backgroundColor="0x000000"
        frameRate="30" xmlns:preloaders="components.common.utils.preloaders.*"
        preloader="components.common.utils.preloaders.MainPreloader"
        >

    <vkUI:layout>
        <s:BasicLayout/>
    </vkUI:layout>

    <fx:Declarations>
        <s:HTTPService url="http://cs1.vensella.ru/app_strepsils/Login" id="loginHTTP" method="POST"
                       resultFormat="text"/>
    </fx:Declarations>

    <fx:Style>
        @namespace
        vkUI
        "library://vkontakte.ru/2009/ui";
        @namespace
        s
        "library://ns.adobe.com/flex/spark";
        @namespace
        mx
        "library://ns.adobe.com/flex/mx";
        @namespace
        components
        "componentes.*";

        @font-face {
            src: url("/assets/fonts/MPBoldCond.otf")
        ;
            fontFamily: mpbc
        ;
        }

        @font-face {
            src: url("/assets/fonts/MPSemibold.ttf")
        ;
            fontFamily: mps
        ;
        }

        @font-face {
            src: url("/assets/fonts/MPRegular.otf")
        ;
            fontFamily: mpr
        ;
        }

        @font-face {
            src: url("/assets/fonts/MPBoldCondItalic.otf")
        ;
            fontFamily: mpbi
        ;
        }

        global {
            modal-transparency: 0.3;
            modal-transparency-color: #000000;
            modal-transparency-blur: 0.2;
        }

    </fx:Style>

    <fx:Script>
		<![CDATA[
        import api.vkontakte.VkontakteGlobals;

        import appmodel.ApplicationModel;

        import components.ApplicationView;
        import components.WallView;
        import components.common.utils.enviroment.vkontakte.ApiResult;
        import components.common.utils.enviroment.vkontakte.FlashVars;
        import components.common.worlds.locations.LocationType;
        import components.pages.world.windows.friendsgame.TypeGameToggle;

        import engine.EngineContext;
        import engine.model.gameServer.GameServer
        import engine.utils.Direction;

        import loading.BombersContentLoader;

        import mx.charts.DateTimeAxis
        import mx.collections.ArrayCollection;
        import mx.controls.Alert
        import mx.core.IVisualElement;

        public static const APP_STARTED_FROM_WALL:int = 0;
        public static const APP_STARTED_COMMON:int = 1;
        public static const WALL_LOTTERY_EMULATION:int = 2;
        public static const APP_STARTED_DEVELOPMENT:int = 3;

        private var mainContentGroup:IVisualElement;

        [Bindable]
        private var bsc:ArrayCollection = new ArrayCollection()

        /* private function testTarget(e: MouseEvent): void
         {
         mx.controls.Alert.show(ObjectUtil.toString({target: e.target.toString()}));
         } */


        override protected function onAddedToStage(e:Event):void {
            super.onAddedToStage(e);

            if (isWrapperExists) {

                basePreloaderGroup.visible = true;

                //VkontakteGlobals.wrapper.addEventListener("onSettingsChanged", onSettingsChanged);
                //VkontakteGlobals.wrapper.addEventListener("onApplicationAdded", onApplicationAdded);
                //VkontakteGlobals.wrapper.addEventListener("onLocationChanged", onLocationChanged);

                Context.Model.viewer.id = VkontakteGlobals.wrapper.application.parameters.viewer_id;

                Context.Model.currentSettings.flashVars.viewerType = VkontakteGlobals.wrapper.application.parameters.viewer_type;
                Context.Model.currentSettings.flashVars.groupId = VkontakteGlobals.wrapper.application.parameters.group_id;
                Context.Model.currentSettings.flashVars.referrer = VkontakteGlobals.wrapper.application.parameters.referrer;
                Context.Model.currentSettings.flashVars.posterId = VkontakteGlobals.wrapper.application.parameters.poster_id;
                Context.Model.currentSettings.flashVars.scaleMode = VkontakteGlobals.wrapper.application.scaleMode;
                Context.Model.currentSettings.flashVars.postId = VkontakteGlobals.wrapper.application.parameters.post_id;
                Context.Model.currentSettings.flashVars.userId = VkontakteGlobals.wrapper.application.parameters.user_id;
                Context.Model.currentSettings.flashVars.auth_key = VkontakteGlobals.wrapper.application.parameters.auth_key;


                if (Context.Model.currentSettings.flashVars.referrer == FlashVars.WALL_VIEW_INLINE) {
                    initApp(APP_STARTED_FROM_WALL);
                } else {

                    Context.Model.currentSettings.apiResult = new ApiResult(VkontakteGlobals.wrapper.application.parameters.api_result, false);
                    Context.Model.currentSettings.votes = Context.Model.currentSettings.apiResult.votes;

                    if (!Context.Model.isDevelopment) {
                        initApp(APP_STARTED_COMMON);
                    } else {
                        initApp(APP_STARTED_DEVELOPMENT);
                    }

                }
            } else {
                // local testing
                Context.Model.trustContent = false;

            }
        }

        private function localEmulation():void {
            Context.Model.viewer.id = "72969483";
            Context.Model.currentSettings.apiResult = new ApiResult("", true);

            initApp(APP_STARTED_COMMON);

            chooseModeGroup.visible = false;
        }

        private function wallEmultation():void {
            Context.Model.viewer.id = "72969483";
            Context.Model.currentSettings.apiResult = new ApiResult("", true);

            Context.Model.currentSettings.flashVars.postId = "x31ox31x30ox32ox30ox30";
            Context.Model.currentSettings.flashVars.userId = "72969483";

            initApp(WALL_LOTTERY_EMULATION);

            chooseModeGroup.visible = false;
        }

        private function onSettingsChanged(e:Object):void {
            navigateToURL(new URLRequest(ApplicationModel.APPLICATION_LINK));
            // may be starting initiated proccess with standert functions
        }


        private function onLocationChanged(e:Object):void {
            //mx.controls.Alert.show("Hello! Location chaged!");
            //mx.controls.Alert.show(e.location.toString());
        }


        private function initApp(type:int):void {

            chooseModeGroup.visible = false;

            switch (type) {

                case WALL_LOTTERY_EMULATION:

                    basePreloaderGroup.visible = false;

                    mainContentGroup = new WallView();
                    mainApplicationGroup.addElement(mainContentGroup);

                    break;

                case APP_STARTED_FROM_WALL:

                    //mx.controls.Alert.show(Context.Model.viewer.id);

                    basePreloaderGroup.visible = false;

                    mainContentGroup = new WallView();
                    mainApplicationGroup.addElement(mainContentGroup);

                    mainApplicationGroup.scaleX = 607 / 456;
                    mainApplicationGroup.scaleY = 412 / 308;

                    break;

                case APP_STARTED_COMMON:

                    mainContentGroup = new ApplicationView();
                    mainApplicationGroup.addElement(mainContentGroup);

                    Context.Model.addCustomListener(ContextEvent.SHOW_MAIN_PREALODER, function(e:ContextEvent):void {
                        basePreloaderGroup.visible = e.data as Boolean;
                    });

                    Context.Model.addCustomListener(ContextEvent.NEED_TO_SHOW_CANT_CONNECT_WINDOW, function(e:ContextEvent):void {
                        basePreloaderGroup.visible = false
                        disconnectedText.text = "Не удалось подключиться к серверу"
                        disconnectedWindow.visible = true;
                    });

                    Context.gameServer.loginError.addOnce(function():void {
                        basePreloaderGroup.visible = false
                        disconnectedText.text = "Не удалось войти на сервер.\nСкорее всего, у вас просто\nоткрыто еще одно окно\nБомбастеров"
                        disconnectedWindow.visible = true;
                    })

                    Context.Model.addCustomListener(ContextEvent.NEED_TO_SHOW_DISCONNECTED_WINDOW, function(e:ContextEvent):void {
                        disconnectedWindow.visible = true;
                    });

                    if (isWrapperExists) {
                        Context.Model.dispatchCustomEvent(ContextEvent.SHOW_MAIN_PREALODER, true)
                        BombersContentLoader.readyToUseAppView.addOnce(function():void {
                            Context.Model.dispatchCustomEvent(ContextEvent.SHOW_MAIN_PREALODER, false)
                        })
                        Context.gameModel.init();
                    }
                    EngineContext.pingChanged.add(function(ping:Point):void {
                        bsc.addItemAt(ping,0)
                    })
                    break;
                case APP_STARTED_DEVELOPMENT:

                    chooseModeGroup.visible = false;
                    basePreloaderGroup.visible = false;
                    developmentGroup.visible = true;

                    break;
                default:
                    break;
            }
        }

        private function retry():void {
            if (isWrapperExists) {
                VkontakteGlobals.wrapper.external.navigateToURL(new URLRequest(ApplicationModel.APPLICATION_LINK))
            }
        }

        //        private function setId(id:int):void {
        //
        //            mainContentGroup = new ApplicationView();
        //            mainApplicationGroup.addElement(mainContentGroup);
        //
        //            Context.Model.addCustomListener(ContextEvent.SHOW_MAIN_PREALODER, function(e:ContextEvent):void {
        //                basePreloaderGroup.visible = e.data as Boolean;
        //            });
        //            Context.Model.dispatchCustomEvent(ContextEvent.SHOW_MAIN_PREALODER, true)
        //            BombersContentLoader.bomberTypesLoaded.addOnce(function():void {
        //                Context.Model.dispatchCustomEvent(ContextEvent.SHOW_MAIN_PREALODER, false)
        //            })
        //
        //            Context.Model.currentSettings.socialProfile = new VkontakteProfile("test" + id.toString());
        //            Context.Model.currentSettings.flashVars.auth_key = "test" + id.toString();
        //            developmentGroup.visible = false;
        //
        //            Context.gameModel.init();
        //        }

        private function joinTestGame_clickHandler(event:MouseEvent):void {
            Context.gameModel.fastJoinFailed.addOnce(function():void {
                Context.Model.dispatchCustomEvent(ContextEvent.NEED_TO_SHOW_ERROR_FRIENDS_GAMEW,
                {
                    text: "Мне очень стыдно.. но не удалось.. попробуй еще раз!",
                    type: TypeGameToggle.TOGGLE_STATE_ENJOY
                });
            })

            Context.gameModel.someoneJoinedToGame.addOnce(function(p1:*):void {
                Context.Model.windowsManager.closeAll(true);
                Context.Model.dispatchCustomEvent(ContextEvent.NEED_TO_CHANGE_MAIN_TAB, ApplicationView.TAB_NAME_GAME);
            })
            Context.gameModel.joinConcreteGame("test1", "test")

        }

        private function createTestGame_clickHandler(event:MouseEvent):void {
            Context.Model.dispatchCustomEvent(ContextEvent.NEED_TO_SHOW_WARNING_FRIENDS_GAMEW,
            {
                text: "Создаю игру...",
                type: TypeGameToggle.TOGGLE_STATE_CREATE
            });
            Context.gameModel.createGameFailed.addOnce(function():void {
                Context.Model.dispatchCustomEvent(ContextEvent.NEED_TO_SHOW_ERROR_FRIENDS_GAMEW,
                {
                    text: "Не удалось создать игру!",
                    type: TypeGameToggle.TOGGLE_STATE_CREATE
                });
            })
            Context.gameModel.someoneJoinedToGame.addOnce(function (p1:*):void {
                Context.Model.windowsManager.closeAll(true);
                Context.Model.dispatchCustomEvent(ContextEvent.NEED_TO_CHANGE_MAIN_TAB, ApplicationView.TAB_NAME_GAME);
            })
            Context.gameModel.tryCreateRegularGame("test1", "test", LocationType.WORLD1_GRASSFIELDS)
        }

        private function measurePing_clickHandler(event:MouseEvent):void {
            Context.gameServer.measurePing()
        }
        ]]>
	</fx:Script>


    <s:BorderContainer
            id="mainApplicationGroup"
            width="100%" height="100%"
            backgroundColor="0xffffff"
            borderVisible="false"
            />

    <s:HGroup id="chooseModeGroup" width="100%" height="100%">
        <s:HGroup width="100%" height="100%" horizontalAlign="center" verticalAlign="middle">
            <s:Button label="Local emulation" click="localEmulation();"/>
            <s:Button label="Wall emulation" click="wallEmultation();"/>
        </s:HGroup>
    </s:HGroup>

    <s:Group id="basePreloaderGroup" width="100%" height="100%"
             visible="false">
        <s:Rect width="100%" height="100%"
                alpha="0.7"
                >
            <s:fill>
                <s:SolidColor color="0x000000"/>
            </s:fill>
        </s:Rect>
        <s:HGroup width="100%" height="100%"
                  horizontalAlign="center" verticalAlign="middle"
                  paddingTop="-200"
                >
            <preloaders:Spinner tickColor="0xeeeeee" tickWidth="6" size="60"/>
            <s:Label text="Загружаю всякий стафф" fontFamily="mpbc" fontSize="50" color="0xeeeeee"/>
        </s:HGroup>
    </s:Group>

    <s:Group id="disconnectedWindow" width="100%" height="100%"
             visible="false">
        <s:Rect width="100%" height="100%"
                alpha="0.6"
                >
            <s:fill>
                <s:SolidColor color="0x000000"/>
            </s:fill>
        </s:Rect>
        <s:VGroup width="100%" height="100%"
                  horizontalAlign="center" verticalAlign="middle"
                  paddingTop="-200"
                >
            <s:Label id="disconnectedText" text="Произошло отключение от сервера" fontFamily="mpbc" fontSize="50"
                     color="0xeeeeee" textAlign="center"/>
            <flexcomponents:PatternButton skinClass="skins.buttons.Pattern3ButtonS"
                                          customLabel="Еще раз"
                                          fontSize="30"
                                          fontSizeOver="30"
                                          click="retry()"
                    />
        </s:VGroup>
    </s:Group>

    <s:HGroup id="developmentGroup" width="100%" height="100%"
              horizontalAlign="center" verticalAlign="middle"
              visible="false"
            >
        <!--<s:Button label="ID1" click="setId(1);"/>-->
        <!--<s:Button label="ID2" click="setId(2);"/>-->
        <!--<s:Button label="ID3" click="setId(3);"/>-->
    </s:HGroup>
    <mx:UIComponent id="testContent" width="300" height="300" x="100" y="100"/>
    <s:Button id="createTestGame" click="createTestGame_clickHandler(event)" x="100" y="50" content="create test"/>
    <s:Button id="joinTestGame" click="joinTestGame_clickHandler(event)" x="100" y="70" content="join test"/>
    <s:Button id="measurePing" click="measurePing_clickHandler(event)" x="100" y="90" content="PING"/>
    <s:List x="100" y="530" width="250" height="180" id="ping" dataProvider="{bsc}" allowMultipleSelection="true">
		<s:itemRenderer>
			<fx:Component>
				<s:ItemRenderer>
					<s:HGroup>
						<s:Label text="{data.x}"/>
                        <s:Label text="{data.y}"/>
					</s:HGroup>
				</s:ItemRenderer>
			</fx:Component>
		</s:itemRenderer>
	</s:List>
</vkUI:VkontakteApplication>
